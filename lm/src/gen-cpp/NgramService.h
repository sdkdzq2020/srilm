/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NgramService_H
#define NgramService_H

#include <thrift/TDispatchProcessor.h>
#include "service_types.h"

namespace ais {

class NgramServiceIf {
 public:
  virtual ~NgramServiceIf() {}
  virtual void lm(std::vector<PrintTextStats> & _return, const std::vector<std::string> & src) = 0;
};

class NgramServiceIfFactory {
 public:
  typedef NgramServiceIf Handler;

  virtual ~NgramServiceIfFactory() {}

  virtual NgramServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NgramServiceIf* /* handler */) = 0;
};

class NgramServiceIfSingletonFactory : virtual public NgramServiceIfFactory {
 public:
  NgramServiceIfSingletonFactory(const boost::shared_ptr<NgramServiceIf>& iface) : iface_(iface) {}
  virtual ~NgramServiceIfSingletonFactory() {}

  virtual NgramServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NgramServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<NgramServiceIf> iface_;
};

class NgramServiceNull : virtual public NgramServiceIf {
 public:
  virtual ~NgramServiceNull() {}
  void lm(std::vector<PrintTextStats> & /* _return */, const std::vector<std::string> & /* src */) {
    return;
  }
};

typedef struct _NgramService_lm_args__isset {
  _NgramService_lm_args__isset() : src(false) {}
  bool src;
} _NgramService_lm_args__isset;

class NgramService_lm_args {
 public:

  NgramService_lm_args() {
  }

  virtual ~NgramService_lm_args() throw() {}

  std::vector<std::string>  src;

  _NgramService_lm_args__isset __isset;

  void __set_src(const std::vector<std::string> & val) {
    src = val;
  }

  bool operator == (const NgramService_lm_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const NgramService_lm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NgramService_lm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NgramService_lm_pargs {
 public:


  virtual ~NgramService_lm_pargs() throw() {}

  const std::vector<std::string> * src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NgramService_lm_result__isset {
  _NgramService_lm_result__isset() : success(false) {}
  bool success;
} _NgramService_lm_result__isset;

class NgramService_lm_result {
 public:

  NgramService_lm_result() {
  }

  virtual ~NgramService_lm_result() throw() {}

  std::vector<PrintTextStats>  success;

  _NgramService_lm_result__isset __isset;

  void __set_success(const std::vector<PrintTextStats> & val) {
    success = val;
  }

  bool operator == (const NgramService_lm_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NgramService_lm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NgramService_lm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NgramService_lm_presult__isset {
  _NgramService_lm_presult__isset() : success(false) {}
  bool success;
} _NgramService_lm_presult__isset;

class NgramService_lm_presult {
 public:


  virtual ~NgramService_lm_presult() throw() {}

  std::vector<PrintTextStats> * success;

  _NgramService_lm_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NgramServiceClient : virtual public NgramServiceIf {
 public:
  NgramServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  NgramServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void lm(std::vector<PrintTextStats> & _return, const std::vector<std::string> & src);
  void send_lm(const std::vector<std::string> & src);
  void recv_lm(std::vector<PrintTextStats> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NgramServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NgramServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NgramServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_lm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NgramServiceProcessor(boost::shared_ptr<NgramServiceIf> iface) :
    iface_(iface) {
    processMap_["lm"] = &NgramServiceProcessor::process_lm;
  }

  virtual ~NgramServiceProcessor() {}
};

class NgramServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NgramServiceProcessorFactory(const ::boost::shared_ptr< NgramServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NgramServiceIfFactory > handlerFactory_;
};

class NgramServiceMultiface : virtual public NgramServiceIf {
 public:
  NgramServiceMultiface(std::vector<boost::shared_ptr<NgramServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NgramServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NgramServiceIf> > ifaces_;
  NgramServiceMultiface() {}
  void add(boost::shared_ptr<NgramServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void lm(std::vector<PrintTextStats> & _return, const std::vector<std::string> & src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lm(_return, src);
    }
    ifaces_[i]->lm(_return, src);
    return;
  }

};

} // namespace

#endif
