/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ais {

typedef struct _PrintTextStats__isset {
  _PrintTextStats__isset() : SegmengResult(false), OOVWords(false), ZerosProbWords(false), ProbLog(false), SentLog(false) {}
  bool SegmengResult;
  bool OOVWords;
  bool ZerosProbWords;
  bool ProbLog;
  bool SentLog;
} _PrintTextStats__isset;

class PrintTextStats {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  PrintTextStats() : SegmengResult(), OOVWords(), ZerosProbWords(), ProbLog(), SentLog() {
  }

  virtual ~PrintTextStats() throw() {}

  std::string SegmengResult;
  std::string OOVWords;
  std::string ZerosProbWords;
  std::string ProbLog;
  std::string SentLog;

  _PrintTextStats__isset __isset;

  void __set_SegmengResult(const std::string& val) {
    SegmengResult = val;
  }

  void __set_OOVWords(const std::string& val) {
    OOVWords = val;
  }

  void __set_ZerosProbWords(const std::string& val) {
    ZerosProbWords = val;
  }

  void __set_ProbLog(const std::string& val) {
    ProbLog = val;
  }

  void __set_SentLog(const std::string& val) {
    SentLog = val;
  }

  bool operator == (const PrintTextStats & rhs) const
  {
    if (!(SegmengResult == rhs.SegmengResult))
      return false;
    if (!(OOVWords == rhs.OOVWords))
      return false;
    if (!(ZerosProbWords == rhs.ZerosProbWords))
      return false;
    if (!(ProbLog == rhs.ProbLog))
      return false;
    if (!(SentLog == rhs.SentLog))
      return false;
    return true;
  }
  bool operator != (const PrintTextStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrintTextStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PrintTextStats &a, PrintTextStats &b);

} // namespace

#endif
