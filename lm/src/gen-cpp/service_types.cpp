/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "service_types.h"

#include <algorithm>

namespace ais {

const char* PrintTextStats::ascii_fingerprint = "BFF0E21728CB005F9AA5774A41542B8D";
const uint8_t PrintTextStats::binary_fingerprint[16] = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

uint32_t PrintTextStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SegmengResult);
          this->__isset.SegmengResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->OOVWords);
          this->__isset.OOVWords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ZerosProbWords);
          this->__isset.ZerosProbWords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ProbLog);
          this->__isset.ProbLog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SentLog);
          this->__isset.SentLog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrintTextStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PrintTextStats");

  xfer += oprot->writeFieldBegin("SegmengResult", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->SegmengResult);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OOVWords", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->OOVWords);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ZerosProbWords", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ZerosProbWords);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbLog", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ProbLog);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SentLog", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->SentLog);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrintTextStats &a, PrintTextStats &b) {
  using ::std::swap;
  swap(a.SegmengResult, b.SegmengResult);
  swap(a.OOVWords, b.OOVWords);
  swap(a.ZerosProbWords, b.ZerosProbWords);
  swap(a.ProbLog, b.ProbLog);
  swap(a.SentLog, b.SentLog);
  swap(a.__isset, b.__isset);
}

} // namespace
